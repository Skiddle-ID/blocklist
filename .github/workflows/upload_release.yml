name: Update Blocklist

on:
  schedule:
    - cron: '0 * * * *' # Check Every Hour
  workflow_dispatch:

jobs:
  update-blocklist:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.BOT_GITHUB_TOKEN || github.token }}

      # Step 2: Print Environment Variables (Debugging)
      - name: Print environment variables
        run: |
          echo "DOMAIN_URL=${{ secrets.SOURCE_URL }}"
          echo "IP_URL=${{ secrets.SOURCE_URL2 }}"
          echo "SITUS_JUDI=${{ secrets.SITUS_JUDI }}"

      # Step 3: Download the files and verify
      - name: Download files
        run: |
          echo "Downloading files from the provided URLs..."
          curl --insecure -m 300 -o "domains.txt" "$DOMAIN_URL"
          curl --insecure -m 300 -o "ipaddress_isp.txt" "$IP_URL"
          curl --insecure -m 300 -o "situs_judi.txt" "$SITUS_JUDI"

          # Check if files are downloaded successfully
          if [[ ! -f "domains.txt" || ! -f "ipaddress_isp.txt" || ! -f "situs_judi.txt" ]]; then
            echo "Error: One or more files failed to download. Exiting."
            exit 1
          else
            echo "Files downloaded successfully."
          fi
        env:
          DOMAIN_URL: ${{ secrets.SOURCE_URL }}
          IP_URL: ${{ secrets.SOURCE_URL2 }}
          SITUS_JUDI: ${{ secrets.SITUS_JUDI }}

      # Step 4: Install GitHub CLI (for uploading release assets)
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # Step 5: Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Step 6: Create or Update Release with the Same Tag (`latest`)
      - name: Create or Update Release with Same Tag
        run: |
          # Use the same tag `latest` for all releases
          TAG="latest"

          echo "Creating or updating release with tag: $TAG"

          # Check if the release with tag `latest` exists
          if gh release view "$TAG" &>/dev/null; then
            echo "Release $TAG exists. Deleting it first."
            gh release delete "$TAG" -y
          fi

          # Create a new release with the `latest` tag
          gh release create "$TAG" \
            --title "Latest Blocklist Update" \
            --notes "This release contains the latest blocklist updates." \
            domains.txt ipaddress_isp.txt situs_judi.txt --clobber

      # Step 7: Clean up environment
      - name: Cleanup
        run: |
          rm -f domains.txt ipaddress_isp.txt situs_judi.txt
